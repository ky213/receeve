service: receeve

provider:
  name: aws
  region: us-east-1
  stage: ${opt:stage, "local"}
  profile: default
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    # TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}
    SNS_ENDPOINT: 'http://localhost:4001'
    TABLE_NAME: 'EmailEvents'
    DB_ENDPOINT: 'http://localhost:4002'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: '*'
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
            - lambda:InvokeAsync
          Resource: '*'
        - Effect: Allow
          Action:
            - SNS:Publish
          Resource: '*'

functions:
  emailEvent:
    handler: handler.emailEventHandler
    timeout: 30
    events:
      - http:
          method: post
          path: emailevent
          cors: true

resources:
  Resources:
    EmailEventsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: 'EmailEvents'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    keepOutputDirectory: true
  serverless-offline:
    httpPort: 4000
  serverless-offline-sns:
    port: 4001
    debug: true
  dynamodb:
    stages:
      - local
    start:
      port: 4002
      inMemory: true
      noStart: true
    migration:
      dir: offline/migrations

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-offline-sns
  - serverless-dynamodb-local
